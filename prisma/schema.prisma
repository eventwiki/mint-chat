generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String      @id @default(cuid())
  name               String?
  email              String?     @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime?   @updatedAt
  recentlyUse        DateTime?
  costTokens         Int         @default(0)
  costUSD            Float       @default(0)
  availableTokens    Int         @default(15000)
  license_type       String?
  freeTrialed        Int         @default(0)
  productHuntTrialed Int         @default(0)
  twitterTrialed     Int         @default(0)
  accounts           Account[]
  Cost               Cost[]
  License            License[]
  sessions           Session[]
  share              Share[]
  Backup             Backup[]
  ApiTokens          ApiTokens[]
  password           String?
}

model Backup {
  id        String    @id @default(cuid())
  content   String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ApiTokens {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String
  // 0: stop, 1: running
  status      Int       @default(0)
  used_quota  Int       @default(0)
  // -1: no limit
  total_quota Int       @default(0)
  // not exist means it never expires.
  expire      DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model License {
  id                  String    @id @default(cuid())
  license_key         String    @unique
  license_created_at  DateTime?
  license_activate_at DateTime?
  variants_name       String?
  price               Float?
  createdAt           DateTime  @default(now())
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Share {
  id             String    @id @default(cuid())
  channel_model  Json
  channel_name   String?
  channel_prompt String?
  chat_content   Json[]
  anonymous      Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  userId         String?
  userName       String?
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Prompt {
  id           String    @id @default(cuid())
  title        String
  icon         String
  desc         String
  content      Json
  creator      String
  creatorName  String?
  creatorEmail String?
  status       Int       @default(0)
  like         Int       @default(0)
  usageCount   Int       @default(0)
  type         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model Cost {
  id         String   @id @default(cuid())
  costTokens Int      @default(0)
  costUSD    Float    @default(0)
  userId     String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
